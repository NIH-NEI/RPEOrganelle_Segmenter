# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rpesegm
else:
    import _rpesegm

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def assemble_basic(mask3d, csvfile):
    return _rpesegm.assemble_basic(mask3d, csvfile)

def assemble_dna(mask3d, csvfile, validate=True):
    return _rpesegm.assemble_dna(mask3d, csvfile, validate)

def assemble_actin(mask3d, csvfile, dna_csvfile, z01_csvfile, validate=True):
    return _rpesegm.assemble_actin(mask3d, csvfile, dna_csvfile, z01_csvfile, validate)

def detect_top_bottom(mask3d, actin_csvfile, dna_csvfile):
    return _rpesegm.detect_top_bottom(mask3d, actin_csvfile, dna_csvfile)

def extract_z01(data3d):
    return _rpesegm.extract_z01(data3d)

def combo_z01(data3d):
    return _rpesegm.combo_z01(data3d)

def normalize_frame(sdata, kernel_size):
    return _rpesegm.normalize_frame(sdata, kernel_size)

def adjusted_threshold(data, thresh, pct):
    return _rpesegm.adjusted_threshold(data, thresh, pct)

def export_2d_segmentation(mask, csvfile):
    return _rpesegm.export_2d_segmentation(mask, csvfile)

def import_2d_segmentation(mask, csvfile):
    return _rpesegm.import_2d_segmentation(mask, csvfile)

def import_3d_segmentation(mask3d, csvfile, border=True):
    return _rpesegm.import_3d_segmentation(mask3d, csvfile, border)

def read_reshape(mask, csvfile):
    return _rpesegm.read_reshape(mask, csvfile)

def match_z01(mask, mask2):
    return _rpesegm.match_z01(mask, mask2)

def segment_actin(*args):
    return _rpesegm.segment_actin(*args)

def segment_dna(*args):
    return _rpesegm.segment_dna(*args)

def compare_with_reshape(*args):
    return _rpesegm.compare_with_reshape(*args)

def colorize_reshape_comparison(*args):
    return _rpesegm.colorize_reshape_comparison(*args)

def segment_actin_z01(*args):
    return _rpesegm.segment_actin_z01(*args)


