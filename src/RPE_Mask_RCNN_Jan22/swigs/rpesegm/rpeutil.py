# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rpeutil
else:
    import _rpeutil

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rpeutil.delete_SwigPyIterator

    def value(self):
        return _rpeutil.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _rpeutil.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _rpeutil.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _rpeutil.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _rpeutil.SwigPyIterator_equal(self, x)

    def copy(self):
        return _rpeutil.SwigPyIterator_copy(self)

    def next(self):
        return _rpeutil.SwigPyIterator_next(self)

    def __next__(self):
        return _rpeutil.SwigPyIterator___next__(self)

    def previous(self):
        return _rpeutil.SwigPyIterator_previous(self)

    def advance(self, n):
        return _rpeutil.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _rpeutil.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _rpeutil.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _rpeutil.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _rpeutil.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _rpeutil.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _rpeutil.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _rpeutil:
_rpeutil.SwigPyIterator_swigregister(SwigPyIterator)

class vectori(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _rpeutil.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rpeutil.vectori___nonzero__(self)

    def __bool__(self):
        return _rpeutil.vectori___bool__(self)

    def __len__(self):
        return _rpeutil.vectori___len__(self)

    def __getslice__(self, i, j):
        return _rpeutil.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rpeutil.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rpeutil.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rpeutil.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rpeutil.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rpeutil.vectori___setitem__(self, *args)

    def pop(self):
        return _rpeutil.vectori_pop(self)

    def append(self, x):
        return _rpeutil.vectori_append(self, x)

    def empty(self):
        return _rpeutil.vectori_empty(self)

    def size(self):
        return _rpeutil.vectori_size(self)

    def swap(self, v):
        return _rpeutil.vectori_swap(self, v)

    def begin(self):
        return _rpeutil.vectori_begin(self)

    def end(self):
        return _rpeutil.vectori_end(self)

    def rbegin(self):
        return _rpeutil.vectori_rbegin(self)

    def rend(self):
        return _rpeutil.vectori_rend(self)

    def clear(self):
        return _rpeutil.vectori_clear(self)

    def get_allocator(self):
        return _rpeutil.vectori_get_allocator(self)

    def pop_back(self):
        return _rpeutil.vectori_pop_back(self)

    def erase(self, *args):
        return _rpeutil.vectori_erase(self, *args)

    def __init__(self, *args):
        _rpeutil.vectori_swiginit(self, _rpeutil.new_vectori(*args))

    def push_back(self, x):
        return _rpeutil.vectori_push_back(self, x)

    def front(self):
        return _rpeutil.vectori_front(self)

    def back(self):
        return _rpeutil.vectori_back(self)

    def assign(self, n, x):
        return _rpeutil.vectori_assign(self, n, x)

    def resize(self, *args):
        return _rpeutil.vectori_resize(self, *args)

    def insert(self, *args):
        return _rpeutil.vectori_insert(self, *args)

    def reserve(self, n):
        return _rpeutil.vectori_reserve(self, n)

    def capacity(self):
        return _rpeutil.vectori_capacity(self)
    __swig_destroy__ = _rpeutil.delete_vectori

# Register vectori in _rpeutil:
_rpeutil.vectori_swigregister(vectori)

class vectord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _rpeutil.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rpeutil.vectord___nonzero__(self)

    def __bool__(self):
        return _rpeutil.vectord___bool__(self)

    def __len__(self):
        return _rpeutil.vectord___len__(self)

    def __getslice__(self, i, j):
        return _rpeutil.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rpeutil.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rpeutil.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rpeutil.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rpeutil.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rpeutil.vectord___setitem__(self, *args)

    def pop(self):
        return _rpeutil.vectord_pop(self)

    def append(self, x):
        return _rpeutil.vectord_append(self, x)

    def empty(self):
        return _rpeutil.vectord_empty(self)

    def size(self):
        return _rpeutil.vectord_size(self)

    def swap(self, v):
        return _rpeutil.vectord_swap(self, v)

    def begin(self):
        return _rpeutil.vectord_begin(self)

    def end(self):
        return _rpeutil.vectord_end(self)

    def rbegin(self):
        return _rpeutil.vectord_rbegin(self)

    def rend(self):
        return _rpeutil.vectord_rend(self)

    def clear(self):
        return _rpeutil.vectord_clear(self)

    def get_allocator(self):
        return _rpeutil.vectord_get_allocator(self)

    def pop_back(self):
        return _rpeutil.vectord_pop_back(self)

    def erase(self, *args):
        return _rpeutil.vectord_erase(self, *args)

    def __init__(self, *args):
        _rpeutil.vectord_swiginit(self, _rpeutil.new_vectord(*args))

    def push_back(self, x):
        return _rpeutil.vectord_push_back(self, x)

    def front(self):
        return _rpeutil.vectord_front(self)

    def back(self):
        return _rpeutil.vectord_back(self)

    def assign(self, n, x):
        return _rpeutil.vectord_assign(self, n, x)

    def resize(self, *args):
        return _rpeutil.vectord_resize(self, *args)

    def insert(self, *args):
        return _rpeutil.vectord_insert(self, *args)

    def reserve(self, n):
        return _rpeutil.vectord_reserve(self, n)

    def capacity(self):
        return _rpeutil.vectord_capacity(self)
    __swig_destroy__ = _rpeutil.delete_vectord

# Register vectord in _rpeutil:
_rpeutil.vectord_swigregister(vectord)


def import_contours(w, h, in_csv):
    return _rpeutil.import_contours(w, h, in_csv)

def import_reshape_contours(mask, rs_csv):
    return _rpeutil.import_reshape_contours(mask, rs_csv)

def import_3d_contours(w, h, d, in_csv):
    return _rpeutil.import_3d_contours(w, h, d, in_csv)

def cell_for_contour(w, h, d, z0, flat_cells, flat_cont):
    return _rpeutil.cell_for_contour(w, h, d, z0, flat_cells, flat_cont)

def validate_contour(w, h, flat_slices, flat_cont):
    return _rpeutil.validate_contour(w, h, flat_slices, flat_cont)

def simplify_contour(flat_cont):
    return _rpeutil.simplify_contour(flat_cont)

def intersecting_slices(flat_slices, flat_cont):
    return _rpeutil.intersecting_slices(flat_slices, flat_cont)

def cut_slices(w, h, flat_slices, flat_cont):
    return _rpeutil.cut_slices(w, h, flat_slices, flat_cont)

def join_slices(w, h, flat_slices, flat_cont):
    return _rpeutil.join_slices(w, h, flat_slices, flat_cont)

def export_3d_contours(mask3d, flat_cells, out_csv, validate, separate):
    return _rpeutil.export_3d_contours(mask3d, flat_cells, out_csv, validate, separate)

def export_2d_contours(mask, flat_slices, out_csv):
    return _rpeutil.export_2d_contours(mask, flat_slices, out_csv)

def cells_at_border(w, h, flat_cells):
    return _rpeutil.cells_at_border(w, h, flat_cells)

def contours_at_border(w, h, flat_slices):
    return _rpeutil.contours_at_border(w, h, flat_slices)

def mask_rcnn_to_particles(ptmask, rois, x_orig=0, y_orig=0):
    return _rpeutil.mask_rcnn_to_particles(ptmask, rois, x_orig, y_orig)

def recombine_flat_particles(mask, flat_particles, scores, fix_borders):
    return _rpeutil.recombine_flat_particles(mask, flat_particles, scores, fix_borders)

def mask2to3(mask):
    return _rpeutil.mask2to3(mask)

def test_fix_borders_actin(mask):
    return _rpeutil.test_fix_borders_actin(mask)

cvar = _rpeutil.cvar
FIX_BORDERS_DNA = cvar.FIX_BORDERS_DNA
FIX_BORDERS_ACTIN = cvar.FIX_BORDERS_ACTIN

